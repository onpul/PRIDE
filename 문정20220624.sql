SELECT *
FROM VIEW_RIDING_LIST;

CREATE OR REPLACE VIEW VIEW_RIDING_LIST
AS
SELECT T2.*, CASE WHEN OPEN<=0 OR TO_DATE(START_DATE, 'YYYY-MM-DD') < TO_DATE(SYSDATE, 'YYYY-MM-DD') OR CONFIRM_DATE IS NOT NULL THEN '참여 불가' 
                  WHEN OPEN>0 AND TO_DATE(START_DATE, 'YYYY-MM-DD') > TO_DATE(SYSDATE, 'YYYY-MM-DD') AND CONFIRM_DATE IS NULL THEN '참여 가능'
                  ELSE '판별 불가' END AS STATUS
FROM
(
SELECT DISTINCT T.RIDING_ID, T.RIDING_NAME, T.MAXIMUM
     , CASE WHEN T.MAXIMUM-COUNT(T.USER_ID) OVER(PARTITION BY RIDING_ID) < 0 THEN 0 
            ELSE T.MAXIMUM-COUNT(T.USER_ID) OVER(PARTITION BY RIDING_ID) END AS OPEN
     , T.START_DATE, T.END_DATE, T.CONFIRM_DATE
     , T.STEP_ID, T.SPEED_ID, T.MOOD_P_ID, T.DINING_P_ID, T.EAT_P_ID, T.AGE_P_ID, T.SEX_P_ID
FROM
(
SELECT A.RIDING_ID, A.RIDING_NAME, A.MAXIMUM, A.START_DATE, A.END_DATE, A.CONFIRM_DATE, B.USER_ID, A.STEP_ID, A.SPEED_ID, A.MOOD_P_ID, A.DINING_P_ID, A.EAT_P_ID, A.AGE_P_ID, A.SEX_P_ID
FROM RIDING A LEFT JOIN PARTICIPATED_MEMBER B
ON A.RIDING_ID = B.RIDING_ID
GROUP BY A.RIDING_ID, A.RIDING_NAME, A.MAXIMUM, A.START_DATE, A.END_DATE, A.CONFIRM_DATE, B.USER_ID
     , A.STEP_ID, A.SPEED_ID, A.MOOD_P_ID, A.DINING_P_ID, A.EAT_P_ID, A.AGE_P_ID, A.SEX_P_ID
)
T
)T2;

SELECT *
FROM RIDING;

SELECT *
FROM PROFILE;

INSERT INTO PROFILE (PROFILE_ID, USER_ID, MOOD_P_ID, EAT_P_ID, PIMG_ID, DINING_P_ID, SEX_P_ID, AGE_P_ID, EMAIL, BIRTHDAY, SEX, PASSWORD, NICKNAME, INTRODUCE)
VALUES ('0', '0', 0, 0, '1', 0, 0, 0, 'admin0@test.com', SYSDATE, 'M', '12341234', '관리자0', NULL);

INSERT INTO PROFILE (PROFILE_ID, USER_ID, MOOD_P_ID, EAT_P_ID, PIMG_ID, DINING_P_ID, SEX_P_ID, AGE_P_ID, EMAIL, BIRTHDAY, SEX, PASSWORD, NICKNAME, INTRODUCE)
VALUES ('1', '1', 0, 0, '1', 0, 0, 0, 'admin1@test.com', SYSDATE, 'F', '12341234', '관리자1', NULL);

COMMIT;

SELECT COUNT(*)
FROM RIDING;

SELECT T2.*, CASE WHEN OPEN<0 OR TO_DATE(START_DATE, 'YYYY-MM-DD') < TO_DATE(SYSDATE, 'YYYY-MM-DD') OR CONFIRM_DATE IS NOT NULL THEN '참여 불가' 
                  WHEN OPEN>0 AND TO_DATE(START_DATE, 'YYYY-MM-DD') > TO_DATE(SYSDATE, 'YYYY-MM-DD') AND CONFIRM_DATE IS NULL THEN '참여 가능'
                  ELSE '판별 불가' END AS STATUS
FROM
(
SELECT DISTINCT T.RIDING_ID, T.RIDING_NAME, T.MAXIMUM
     , CASE WHEN T.MAXIMUM-COUNT(T.USER_ID) OVER(PARTITION BY RIDING_ID) < 0 THEN 0 
            ELSE T.MAXIMUM-COUNT(T.USER_ID) OVER(PARTITION BY RIDING_ID) END AS OPEN
     , T.START_DATE, T.END_DATE, T.CONFIRM_DATE
     , T.STEP_ID, T.SPEED_ID, T.MOOD_P_ID, T.DINING_P_ID, T.EAT_P_ID, T.AGE_P_ID, T.SEX_P_ID
FROM
(
SELECT A.RIDING_ID, A.RIDING_NAME, A.MAXIMUM, A.START_DATE, A.END_DATE, A.CONFIRM_DATE, B.USER_ID, A.STEP_ID, A.SPEED_ID, A.MOOD_P_ID, A.DINING_P_ID, A.EAT_P_ID, A.AGE_P_ID, A.SEX_P_ID
FROM RIDING A LEFT JOIN PARTICIPATED_MEMBER B
ON A.RIDING_ID = B.RIDING_ID
GROUP BY A.RIDING_ID, A.RIDING_NAME, A.MAXIMUM, A.START_DATE, A.END_DATE, A.CONFIRM_DATE, B.USER_ID
     , A.STEP_ID, A.SPEED_ID, A.MOOD_P_ID, A.DINING_P_ID, A.EAT_P_ID, A.AGE_P_ID, A.SEX_P_ID
)
T
)T2;

SELECT A.RIDING_ID, A.RIDING_NAME, A.MAXIMUM, A.START_DATE, A.END_DATE, A.CONFIRM_DATE, B.USER_ID, A.STEP_ID, A.SPEED_ID, A.MOOD_P_ID, A.DINING_P_ID, A.EAT_P_ID, A.AGE_P_ID, A.SEX_P_ID
FROM RIDING A LEFT JOIN PARTICIPATED_MEMBER B
ON A.RIDING_ID = B.RIDING_ID
GROUP BY A.RIDING_ID, A.RIDING_NAME, A.MAXIMUM, A.START_DATE, A.END_DATE, A.CONFIRM_DATE, B.USER_ID
     , A.STEP_ID, A.SPEED_ID, A.MOOD_P_ID, A.DINING_P_ID, A.EAT_P_ID, A.AGE_P_ID, A.SEX_P_ID;
     
--○ 모임 참여자들 넣기
SELECT *
FROM MEMBER A JOIN PROFILE B
ON A.USER_ID = B.USER_ID
ORDER BY TO_NUMBER(A.USER_ID);

--○ 참여한 회원 정보 조회
SELECT RI.RIDING_ID, PA.USER_ID, PR.PIMG_ID, PR.NICKNAME, PR.INTRODUCE, PR.SEX
     , TO_CHAR(ROUND((TO_NUMBER(EXTRACT(YEAR FROM SYSDATE)) - TO_NUMBER(EXTRACT(YEAR FROM BIRTHDAY)+1)) / 10)) || '0' AS AGEGROUP
FROM RIDING RI JOIN PARTICIPATED_MEMBER PA
ON RI.RIDING_ID = PA.RIDING_ID
JOIN PROFILE PR
ON PR.USER_ID = PA.USER_ID
WHERE RI.RIDING_ID = 58;

--○ 참여한 회원 정보 조회
SELECT PA.USER_ID
FROM RIDING RI JOIN PARTICIPATED_MEMBER PA
ON RI.RIDING_ID = PA.RIDING_ID
WHERE RI.RIDING_ID = 58;

SELECT B.PI_ADDRESS, A.NICKNAME, A.INTRODUCE, A.SEX
     , TO_CHAR(ROUND((TO_NUMBER(EXTRACT(YEAR FROM SYSDATE)) - TO_NUMBER(EXTRACT(YEAR FROM BIRTHDAY)+1)) / 10)) || '0' AS AGEGROUP
FROM PROFILE A JOIN PROFILE_IMG B
ON A.PIMG_ID = B.PIMG_ID
WHERE USER_ID = 2;


ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI';

SELECT * 
FROM PROFILE_IMG;

UPDATE PROFILE_IMG
SET PI_ADDRESS = 'https://bigxdata.io/common/img/default_profile.png'
WHERE PIMG_ID = 1;

COMMIT;

SELECT *
FROM PROFILE;

UPDATE PROFILE
SET INTRODUCE = '문정이랑 달릴 사람~!!!'
WHERE USER_ID = 4;

COMMIT;

SELECT *
FROM MEMBER
ORDER BY TO_NUMBER(USER_ID);

SELECT *
FROM RIDING;

DELETE
FROM PARTICIPATED_MEMBER
WHERE USER_ID = 19;

COMMIT;

INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 13, 58, SYSDATE);

COMMIT;

--○ 참여한 모임의 성별 제한 조건과 참여하려는 회원의 성별 체크
SELECT SEX
FROM PROFILE
WHERE USER_ID = 4;

SELECT 
CASE WHEN SEX_P_ID = 0 THEN '0' 
     WHEN SEX_P_ID = 1 THEN 'M' 
     WHEN SEX_P_ID = 2 THEN 'F' ELSE '판별불가' END AS 성별
FROM RIDING
WHERE RIDING_ID = 58;

SELECT *
FROM RIDING;